import React, { useState, useEffect, useMemo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { v4 as uuidv4 } from "uuid";
import { Check, Plus, Trash2, NotebookPen, Clock, LayoutDashboard, Moon } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";

// ---- Local storage helper ---- //
const useLocalState = (key, initial) => {
  const [value, setValue] = useState(() => {
    try {
      const raw = localStorage.getItem(key);
      return raw ? JSON.parse(raw) : initial;
    } catch {
      return initial;
    }
  });
  useEffect(() => {
    try {
      localStorage.setItem(key, JSON.stringify(value));
    } catch {}
  }, [key, value]);
  return [value, setValue];
};

export default function App() {
  const [themeDark, setThemeDark] = useLocalState("prod_theme", false);

  useEffect(() => {
    const root = document.documentElement;
    if (themeDark) root.classList.add("dark");
    else root.classList.remove("dark");
  }, [themeDark]);

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-50 to-white dark:from-slate-900 dark:to-slate-950 text-slate-800 dark:text-slate-100">
      <header className="sticky top-0 z-10 backdrop-blur supports-[backdrop-filter]:bg-white/60 bg-white/80 dark:bg-slate-900/70 border-b border-slate-200 dark:border-slate-800">
        <div className="max-w-5xl mx-auto px-4 py-3 flex items-center justify-between">
          <h1 className="text-xl sm:text-2xl font-bold tracking-tight flex items-center gap-2">
            <LayoutDashboard className="w-5 h-5"/> Productivity App
          </h1>
          <div className="flex items-center gap-4">
            <Label htmlFor="theme" className="text-xs sm:text-sm flex items-center gap-1"><Moon className="w-4 h-4"/> Dark</Label>
            <Switch id="theme" checked={themeDark} onCheckedChange={setThemeDark} />
          </div>
        </div>
      </header>

      <main className="max-w-5xl mx-auto p-4 sm:p-6">
        <Tabs defaultValue="dashboard" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="dashboard"><LayoutDashboard className="w-4 h-4"/> Dashboard</TabsTrigger>
            <TabsTrigger value="tasks"><Check className="w-4 h-4"/> Tasks</TabsTrigger>
            <TabsTrigger value="notes"><NotebookPen className="w-4 h-4"/> Notes</TabsTrigger>
          </TabsList>

          <TabsContent value="dashboard"><DashboardTab /></TabsContent>
          <TabsContent value="tasks"><TasksTab /></TabsContent>
          <TabsContent value="notes"><NotesTab /></TabsContent>
        </Tabs>
      </main>

      <footer className="max-w-5xl mx-auto p-6 text-center text-sm text-slate-500 dark:text-slate-400">
        ✨ Built for Productivity — Tasks, Notes & Focus.
      </footer>
    </div>
  );
}

// ---- Dashboard ---- //
function DashboardTab() {
  const [tasks] = useLocalState("prod_tasks", []);
  const [notes] = useLocalState("prod_notes", []);

  const stats = useMemo(() => ({
    totalTasks: tasks.length,
    done: tasks.filter(t=>t.done).length,
    notes: notes.length
  }), [tasks, notes]);

  return (
    <div className="grid sm:grid-cols-3 gap-4">
      <StatCard title="Total Tasks" value={stats.totalTasks} />
      <StatCard title="Completed" value={stats.done} />
      <StatCard title="Notes" value={stats.notes} />
    </div>
  );
}

function StatCard({ title, value }) {
  return (
    <Card className="border-none shadow-md">
      <CardHeader><CardTitle className="text-base">{title}</CardTitle></CardHeader>
      <CardContent className="text-2xl font-bold">{value}</CardContent>
    </Card>
  );
}

// ---- Tasks ---- //
function TasksTab() {
  const [tasks, setTasks] = useLocalState("prod_tasks", []);
  const [text, setText] = useState("");
  const [due, setDue] = useState("");

  const add = () => {
    if (!text.trim()) return;
    setTasks([{ id: uuidv4(), text, due, done: false }, ...tasks]);
    setText(""); setDue("");
  };
  const toggle = (id) => setTasks(tasks.map(t => t.id === id ? { ...t, done: !t.done } : t));
  const del = (id) => setTasks(tasks.filter(t => t.id !== id));

  return (
    <div className="grid md:grid-cols-2 gap-4">
      <Card className="border-none shadow-md">
        <CardHeader><CardTitle className="text-base flex items-center gap-2"><Check className="w-5 h-5"/>Add Task</CardTitle></CardHeader>
        <CardContent className="space-y-3">
          <Input placeholder="Task description" value={text} onChange={(e)=>setText(e.target.value)} onKeyDown={(e)=> e.key==='Enter' && add()} />
          <Input type="date" value={due} onChange={(e)=>setDue(e.target.value)} />
          <Button onClick={add} className="w-full flex items-center gap-2"><Plus className="w-4 h-4"/>Add</Button>
        </CardContent>
      </Card>

      <div className="grid gap-3">
        <AnimatePresence>
          {tasks.map(t => (
            <motion.div key={t.id} initial={{opacity:0, y:6}} animate={{opacity:1, y:0}} exit={{opacity:0, y:-6}}>
              <Card className={`border-none shadow-md ${t.done ? 'opacity-70' : ''}`}>
                <CardContent className="p-4 flex flex-col sm:flex-row sm:items-center justify-between gap-3">
                  <div className="flex-1">
                    <div className="font-medium">{t.text}</div>
                    {t.due && <div className={`text-xs mt-1 flex items-center gap-1 ${new Date(t.due)<new Date()&&!t.done?'text-red-500':'opacity-70'}`}><Clock className="w-3 h-3"/> {t.due}</div>}
                  </div>
                  <div className="flex items-center gap-2">
                    <button onClick={()=>toggle(t.id)} className={`rounded-full w-6 h-6 flex items-center justify-center border ${t.done ? 'bg-emerald-500/90 text-white' : 'bg-white dark:bg-slate-900'}`}
                      aria-label="Toggle done">
                      {t.done && <Check className="w-4 h-4"/>}
                    </button>
                    <Button variant="ghost" size="icon" onClick={()=>del(t.id)} aria-label="Delete"><Trash2 className="w-4 h-4"/></Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </AnimatePresence>
      </div>
    </div>
  );
}

// ---- Notes ---- //
function NotesTab() {
  const [notes, setNotes] = useLocalState("prod_notes", []);
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");

  const add = () => {
    if (!title.trim() && !content.trim()) return;
    setNotes([{ id: uuidv4(), title, content }, ...notes]);
    setTitle(""); setContent("");
  };
  const remove = (id) => setNotes(notes.filter(n => n.id !== id));

  return (
    <div className="grid md:grid-cols-2 gap-4">
      <Card className="border-none shadow-md">
        <CardHeader><CardTitle className="text-base flex items-center gap-2"><NotebookPen className="w-5 h-5"/>New Note</CardTitle></CardHeader>
        <CardContent className="space-y-3">
          <Input placeholder="Note title" value={title} onChange={(e)=>setTitle(e.target.value)} />
          <Textarea rows={4} placeholder="Write your note..." value={content} onChange={(e)=>setContent(e.target.value)} />
          <Button onClick={add} className="w-full flex items-center gap-2"><Plus className="w-4 h-4"/>Save Note</Button>
        </CardContent>
      </Card>

      <div className="grid gap-3">
        <AnimatePresence>
          {notes.map(n => (
            <motion.div key={n.id} initial={{opacity:0, y:6}} animate={{opacity:1, y:0}} exit={{opacity:0, y:-6}}>
              <Card className="border-none shadow-md">
                <CardContent className="p-4 flex items-start justify-between gap-3">
                  <div>
                    <div className="font-semibold tracking-tight">{n.title}</div>
                    {n.content && <div className="text-sm mt-1 opacity-90">{n.content}</div>}
                  </div>
                  <Button variant="ghost" size="icon" onClick={()=>remove(n.id)} aria-label="Remove"><Trash2 className="w-4 h-4"/></Button>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </AnimatePresence>
      </div>
    </div>
  );
}
npm install
npm run dev
